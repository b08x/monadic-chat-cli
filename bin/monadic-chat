#!/usr/bin/env ruby

# frozen_string_literal: true

require_relative "../lib/monadic_chat"
MonadicChat.require_apps

module MonadicMenu
  include MonadicChat

  PROMPT_SYSTEM.on(:keypress) do |event|
    case event.key.name
    when :ctrl_p
      PROMPT_SYSTEM.trigger(:keyup)
    when :ctrl_n
      PROMPT_SYSTEM.trigger(:keydown)
    end
  end

  def self.clear_screen
    print TTY::Cursor.clear_screen_down
    print "\e[2J\e[f"
  end

  def self.run
    screen_width = TTY::Screen.width - 2
    width = screen_width < TITLE_WIDTH ? screen_width : TITLE_WIDTH

    mon = " M O N A D I C "
    dots = "::"
    chat = " C H A T "
    hpad = " " * ((width - (mon.size + dots.size + chat.size)) / 2).to_i
    title = "#{hpad}#{PASTEL.red.bold(mon + dots + chat)}#{hpad}"
    subtitle = "OpenAI chat/text-completion API client".center(width, " ")
    version = "Version: #{VERSION}".center(width, " ")
    vpad = " " * width

    banner = TTY::Box.frame "#{vpad}\n#{title}\n#{subtitle}\n#{version}\n#{vpad}"

    mode = "normal"
    openai_completion = nil
    parameter = ""

    print_mode = lambda do |m|
      case m
      when "normal"
        PASTEL.bold.green("Normal")
      when "research"
        PASTEL.bold.red("Research")
      end
    end

    loop do
      clear_screen
      print "\n", banner.strip, "\n"

      print TTY::Cursor.save
      openai_completion ||= MonadicChat.authenticate
      exit unless openai_completion

      max_app_name_width = APPS.reduce(8) { |accum, app| app.length > accum ? app.length : accum } + 2
      parameter = PROMPT_SYSTEM.select("Current mode: #{print_mode.call(mode)}\n\nSelect item:",
                                       per_page: 10,
                                       cycle: true,
                                       filter: true,
                                       default: 1,
                                       show_help: :never) do |menu|
        APPS.each do |app|
          next unless TEMPLATES["#{mode}/#{app}"]

          desc = eval("#{app.capitalize}::DESC", binding, __FILE__, __LINE__)
          menu.choice "#{BULLET} #{PASTEL.bold(app.capitalize.ljust(max_app_name_width))} #{desc}", app
        end

        case mode
        when "research"
          menu.choice "#{BULLET} #{PASTEL.bold("Mode".ljust(max_app_name_width))} Switch from #{PASTEL.bold.red("Research")} (current) to #{PASTEL.bold.green("Normal")}", "mode"
        when "normal"
          menu.choice "#{BULLET} #{PASTEL.bold("Mode".ljust(max_app_name_width))} Switch from #{PASTEL.bold.green("Normal")} (current) to #{PASTEL.bold.red("Research")}", "mode"
        end

        menu.choice "#{BULLET} #{PASTEL.bold("Readme".ljust(max_app_name_width))} Open Readme/Documentation", "readme"
        menu.choice "#{BULLET} #{PASTEL.bold("Quit".ljust(max_app_name_width))} Quit/Exit/Bye", "exit"
      end

      begin
        case parameter
        when "mode"
          mode = mode == "normal" ? "research" : "normal"
          next
        when "readme"
          MonadicChat.open_readme
          next
        when "exit"
          clear_screen
          print "#{PASTEL.bold("Bye!")}\n"
          exit
        else
          clear_screen
          eval(parameter.capitalize, binding, __FILE__, __LINE__).new(openai_completion, research_mode: mode == "research").run
        end
      rescue MonadicError
        next
      rescue StandardError => e
        clear_screen
        choice = PROMPT_SYSTEM.select("Error: Something went wrong", default: 2, show_help: :never) do |menu|
          menu.choice "Return to main menu", "menu"
          menu.choice "Show error message and exit", "debug"
        end

        case choice
        when "menu"
          next
        when "debug"
          puts "Error: #{e.message}"
          puts e.backtrace
          break
        end
      end
    end
  end
end

case ARGV.size
when 0
  MonadicMenu.clear_screen
  MonadicMenu.run
when 1
  case ARGV[0]
  when "readme", "-h"
    MonadicChat.open_readme
  when "version", "-v"
    puts MonadicChat::VERSION
  else
    MonadicChat::APPS.each do |app|
      next unless app == ARGV[0]

      openai_completion ||= MonadicChat.authenticate(message: false)
      eval(app.capitalize, binding, __FILE__, __LINE__).new(openai_completion, research_mode: false).run
      exit
    end
    puts "Unknown command"
  end
else
  MonadicChat::APPS.each do |app|
    next unless app == ARGV[0]

    openai_completion ||= MonadicChat.authenticate(message: false)
    app_obj = eval(app.capitalize, binding, __FILE__, __LINE__).new(openai_completion, research_mode: false, params: { "model" => "gpt-4" })
    app_obj.bind(ARGV[1..].join(" "), num_retry: 2)
    exit
  end
  puts "Unknown command"
end
